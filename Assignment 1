{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "ed729209-e9aa-4a3c-93da-bfa143613a18",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'Simran'"
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "\"\"\"Q1. Create one variable containing following type of data:\n",
    "(i) string\n",
    "(ii) list\n",
    "(iii) float\n",
    "(iv) tuple\"\"\"\n",
    "\n",
    "a=\"Simran\"\n",
    "a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "2b807457-58d1-45da-a00a-94c1735955e9",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[1, 2, 3, 'sim', 45.6, 'tan', 'naz']"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "b=[1,2,3,\"sim\",45.6,\"tan\",\"naz\"]\n",
    "b"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "c296ee39-3dda-4bde-80e4-6ab107b4874f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "45.6"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "c=45.6\n",
    "c"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "c1b64ef1-0da5-47eb-9a4d-1e617e9f2a6d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{2, 3, 4, 5, 90.6, 'dfg', 'gfh'}"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t={3,4,5,2,\"dfg\",90.6,\"gfh\"}\n",
    "t"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "ad9e3918-0fc6-4d2e-9bba-c296a45198ab",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "str"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "\"\"\"Q2. Given are some following variables containing data:\n",
    "(i) var1 = ‘ ‘\n",
    "(ii) var2 = ‘[ DS , ML , Python]’\n",
    "(iii) var3 = [ ‘DS’ , ’ML’ , ‘Python’ ]\n",
    "(iv) var4 = 1.\n",
    "What will be the data type of the above given variable.\"\"\"\n",
    "\n",
    "var1=' '\n",
    "type(var1)\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "c8d3981e-c702-4e5e-9cab-ace0b848ec73",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "str"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "var2='[ DS , ML , Python]'\n",
    "type(var2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "172bcedf-16a8-4ddc-bcaa-8395c64d0020",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "list"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "var3 = [ 'DS' , 'ML' , 'Python' ]\n",
    "type(var3)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "1ef2642d-77b0-4a00-895e-4805e5427fb4",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "int"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "var4=1\n",
    "type(var4)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "49f83fd0-3c7c-4658-828e-9ba83fa7fdcc",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "2.0"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "\"\"\"Q3. Explain the use of the following operators using an example:\n",
    "(i) /\n",
    "(ii) %\n",
    "(iii) //\n",
    "(iv) **\"\"\"\n",
    "\n",
    "n1=10\n",
    "n2=5\n",
    "n1/n2\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "af08f3ba-bc71-4d4e-b5bf-3dd448125343",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "n1%n2\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "4eaf3217-2d75-4f40-b3cb-d4cf46458935",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "2"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "n1//n2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "f31378ed-a8b9-44b0-bd85-711933a734a9",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "100000"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "n1**n2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "9b89e1ca-90f4-4206-9820-190016b52155",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1\n",
      "<class 'int'>\n",
      "2\n",
      "<class 'int'>\n",
      "3\n",
      "<class 'int'>\n",
      "sim\n",
      "<class 'str'>\n",
      "tan\n",
      "<class 'str'>\n",
      "naz\n",
      "<class 'str'>\n",
      "6\n",
      "<class 'int'>\n",
      "7\n",
      "<class 'int'>\n",
      "8\n",
      "<class 'int'>\n",
      "9\n",
      "<class 'int'>\n"
     ]
    }
   ],
   "source": [
    "\"\"\"Q4. Create a list of length 10 of your choice containing multiple types of data. Using for loop print the\n",
    "element and its data type.\"\"\"\n",
    "\n",
    "li=[1,2,3,\"sim\",\"tan\",\"naz\",6,7,8,9]\n",
    "for i in li:\n",
    "    print(i)\n",
    "    print(type(i))\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "75ecf457-a058-4f70-8efe-34d1d05f54c9",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1\n",
      "No it is not visible\n",
      "2\n",
      "No it is not visible\n",
      "3\n",
      "is divisible by 3 \n",
      "4\n",
      "No it is not visible\n",
      "5\n",
      "No it is not visible\n",
      "6\n",
      "is divisible by 3 \n",
      "7\n",
      "No it is not visible\n",
      "8\n",
      "No it is not visible\n",
      "9\n",
      "is divisible by 3 \n",
      "10\n",
      "No it is not visible\n",
      "11\n",
      "No it is not visible\n",
      "12\n",
      "is divisible by 3 \n",
      "13\n",
      "No it is not visible\n",
      "14\n",
      "No it is not visible\n",
      "15\n",
      "is divisible by 3 \n",
      "16\n",
      "No it is not visible\n",
      "17\n",
      "No it is not visible\n",
      "18\n",
      "is divisible by 3 \n",
      "19\n",
      "No it is not visible\n",
      "20\n",
      "No it is not visible\n",
      "21\n",
      "is divisible by 3 \n",
      "22\n",
      "No it is not visible\n",
      "23\n",
      "No it is not visible\n",
      "24\n",
      "is divisible by 3 \n",
      "25\n",
      "No it is not visible\n"
     ]
    }
   ],
   "source": [
    "\"\"\"Q6. Create a list containing 25 int type data. Using for loop and if-else condition print if the element is\n",
    "divisible by 3 or not.\"\"\"\n",
    "\n",
    "list=[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25]\n",
    "for i in list:\n",
    "    if(i%3==0):\n",
    "        print(i)\n",
    "        print( \"is divisible by 3 \")\n",
    "    else:\n",
    "        print(i)\n",
    "        print(\"No it is not visible\")\n",
    "        "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "13ab7913-6e5b-4909-bcfc-4eac9dc9cacd",
   "metadata": {},
   "outputs": [],
   "source": [
    "'''Q7. What do you understand about mutable and immutable data types? Give examples for both showing\n",
    "this property.'''\n",
    "\n",
    "'''mutable in which we can change the value like in list'''\n",
    "num=[1,2,3,4,5]\n",
    "num[0]=10\n",
    "num[0]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "1c509b60-6185-4b46-8001-1578b5552be6",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
